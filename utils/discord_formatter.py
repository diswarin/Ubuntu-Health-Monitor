#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Ubuntu Health Monitor - Discord Formatter

‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
"""

import json
from datetime import datetime
import requests
import os
import logging

class DiscordFormatter:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord
    """
    
    def __init__(self, webhook_url=None, settings_path="config/settings.json"):
        """
        ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord Formatter
        
        Args:
            webhook_url (str, optional): Discord webhook URL
            settings_path (str): ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå settings.json
        """
        self.webhook_url = webhook_url
        
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏ webhook_url ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå settings.json
        if not webhook_url:
            try:
                with open(settings_path, 'r') as f:
                    settings = json.load(f)
                    self.webhook_url = settings.get('discord', {}).get('webhook_url', '')
            except (FileNotFoundError, json.JSONDecodeError) as e:
                logging.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord: {str(e)}")
                self.webhook_url = ''
    
    def format_system_alert(self, alerts, system_data):
        """
        ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        
        Args:
            alerts (list): ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            system_data (dict): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
            
        Returns:
            dict: payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord webhook
        """
        embeds = [{
            "title": "üö® System Alert",
            "description": "\n".join(alerts),
            "color": 16711680,  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á
            "fields": [
                {
                    "name": "CPU Usage",
                    "value": f"{system_data['cpu']['percent']}%",
                    "inline": True
                },
                {
                    "name": "Memory Usage",
                    "value": f"{system_data['memory']['ram']['percent']}%",
                    "inline": True
                },
                {
                    "name": "System Uptime",
                    "value": system_data['system']['uptime']['formatted'],
                    "inline": True
                }
            ],
            "footer": {
                "text": f"Host: {system_data['system']['hostname']} | {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            }
        }]
        
        return {
            "content": "‚ö†Ô∏è **Alert Notification** ‚ö†Ô∏è",
            "embeds": embeds
        }
    
    def format_system_report(self, system_data, ai_summary=None):
        """
        ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
        
        Args:
            system_data (dict): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
            ai_summary (str, optional): ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å AI
            
        Returns:
            dict: payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord webhook
        """
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
        cpu_status = "üü¢ Good"
        if system_data['cpu']['percent'] > 80:
            cpu_status = "üî¥ Critical"
        elif system_data['cpu']['percent'] > 60:
            cpu_status = "üü† Warning"
        
        memory_status = "üü¢ Good"
        if system_data['memory']['ram']['percent'] > 85:
            memory_status = "üî¥ Critical"
        elif system_data['memory']['ram']['percent'] > 70:
            memory_status = "üü† Warning"
        
        # ‡∏´‡∏≤‡∏û‡∏≤‡∏£‡πå‡∏ï‡∏¥‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        disk_status = "üü¢ Good"
        lowest_free_partition = ""
        lowest_free_percent = 100
        
        for partition in system_data['disk']['partitions']:
            if partition['percent'] < lowest_free_percent:
                lowest_free_percent = partition['percent']
                lowest_free_partition = partition['mountpoint']
            
            if partition['percent'] > 90:
                disk_status = "üî¥ Critical"
            elif partition['percent'] > 80 and disk_status != "üî¥ Critical":
                disk_status = "üü† Warning"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Discord
        system_info_embed = {
            "title": "üìä System Status Report",
            "description": f"Daily status report for **{system_data['system']['hostname']}**",
            "color": 3447003,  # ‡∏™‡∏µ‡∏ü‡πâ‡∏≤
            "fields": [
                {
                    "name": "CPU",
                    "value": f"{cpu_status}\n{system_data['cpu']['percent']}% used\nLoad: {system_data['cpu']['load_average']['1min']:.2f}, {system_data['cpu']['load_average']['5min']:.2f}, {system_data['cpu']['load_average']['15min']:.2f}",
                    "inline": True
                },
                {
                    "name": "Memory",
                    "value": f"{memory_status}\n{system_data['memory']['ram']['percent']}% used\nSwap: {system_data['memory']['swap']['percent']}% used",
                    "inline": True
                },
                {
                    "name": "Disk",
                    "value": f"{disk_status}\n{lowest_free_partition}: {lowest_free_percent}% used",
                    "inline": True
                },
                {
                    "name": "System Info",
                    "value": f"Platform: {system_data['system']['platform']}\nKernel: {system_data['system']['kernel']}\nUptime: {system_data['system']['uptime']['formatted']}",
                    "inline": False
                }
            ],
            "footer": {
                "text": f"Report generated at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            }
        }
        
        embeds = [system_info_embed]
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° AI summary ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        if ai_summary:
            ai_embed = {
                "title": "ü§ñ AI Analysis",
                "description": ai_summary[:4000] if len(ai_summary) > 4000 else ai_summary,  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 4000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                "color": 10181046  # ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
            }
            embeds.append(ai_embed)
        
        return {
            "content": "üìã **Daily System Status Report**",
            "embeds": embeds
        }
    
    def format_critical_error(self, error_message, context=None):
        """
        ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á
        
        Args:
            error_message (str): ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            context (dict, optional): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            
        Returns:
            dict: payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord webhook
        """
        embed = {
            "title": "üí• Critical Error",
            "description": error_message,
            "color": 15158332,  # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°
            "fields": []
        }
        
        if context:
            for key, value in context.items():
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                if isinstance(value, dict) or isinstance(value, list):
                    value = json.dumps(value, indent=2)
                value_str = str(value)
                if len(value_str) > 1000:
                    value_str = value_str[:997] + "..."
                
                embed["fields"].append({
                    "name": key,
                    "value": f"```\n{value_str}\n```",
                    "inline": False
                })
        
        embed["footer"] = {
            "text": f"Error occurred at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        }
        
        return {
            "content": "üö® **CRITICAL ERROR** üö®",
            "embeds": [embed]
        }
    
    def format_command_output(self, command, output, return_code=0):
        """
        ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        
        Args:
            command (str): ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
            output (str): ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            return_code (int): ‡∏£‡∏´‡∏±‡∏™‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
            
        Returns:
            dict: payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord webhook
        """
        status = "‚úÖ Success" if return_code == 0 else f"‚ùå Failed (code: {return_code})"
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        if len(output) > 4000:
            output = output[:3997] + "..."
        
        embed = {
            "title": "‚å®Ô∏è Command Execution",
            "fields": [
                {
                    "name": "Command",
                    "value": f"```bash\n{command}\n```",
                    "inline": False
                },
                {
                    "name": f"Output ({status})",
                    "value": f"```\n{output}\n```",
                    "inline": False
                }
            ],
            "color": 3066993 if return_code == 0 else 15158332,  # ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
            "footer": {
                "text": f"Executed at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            }
        }
        
        return {
            "embeds": [embed]
        }
    
    def send_message(self, payload):
        """
        ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord webhook
        
        Args:
            payload (dict): ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, False ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
        """
        if not self.webhook_url:
            logging.error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord webhook URL")
            return False
        
        try:
            response = requests.post(
                self.webhook_url,
                data=json.dumps(payload),
                headers={"Content-Type": "application/json"}
            )
            response.raise_for_status()
            return True
        except requests.exceptions.RequestException as e:
            logging.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord: {str(e)}")
            return False

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_data = {
        "cpu": {
            "percent": 75,
            "load_average": {
                "1min": 2.5,
                "5min": 2.2,
                "15min": 1.8
            }
        },
        "memory": {
            "ram": {
                "percent": 65
            },
            "swap": {
                "percent": 10
            }
        },
        "disk": {
            "partitions": [
                {
                    "mountpoint": "/",
                    "percent": 45
                },
                {
                    "mountpoint": "/home",
                    "percent": 78
                }
            ]
        },
        "system": {
            "hostname": "test-server",
            "platform": "Linux-5.15.0-x86_64-with-glibc2.35",
            "kernel": "5.15.0",
            "uptime": {
                "formatted": "5 days, 3 hours, 42 minutes"
            }
        }
    }
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö webhook
    formatter = DiscordFormatter()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö system alert
    alerts = [
        "‚ö†Ô∏è CPU usage is high: 75% (threshold: 70%)",
        "‚ö†Ô∏è Disk usage is high on /home: 78% (threshold: 75%)"
    ]
    alert_payload = formatter.format_system_alert(alerts, test_data)
    print("System Alert Payload:")
    print(json.dumps(alert_payload, indent=2))
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö system report
    ai_summary = "‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô CPU ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà /home ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ï‡πá‡∏° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"
    report_payload = formatter.format_system_report(test_data, ai_summary)
    print("\nSystem Report Payload:")
    print(json.dumps(report_payload, indent=2))
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö critical error
    error_payload = formatter.format_critical_error(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö InfluxDB ‡πÑ‡∏î‡πâ",
        {"exception": "ConnectionRefusedError", "attempts": 3}
    )
    print("\nCritical Error Payload:")
    print(json.dumps(error_payload, indent=2))
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö command output
    command_payload = formatter.format_command_output(
        "df -h",
        "Filesystem      Size  Used Avail Use% Mounted on\n/dev/sda1        50G   22G   28G  45% /\n/dev/sda2       200G  156G   44G  78% /home"
    )
    print("\nCommand Output Payload:")
    print(json.dumps(command_payload, indent=2))
    
    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ webhook URL ‡πÑ‡∏ß‡πâ ‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if formatter.webhook_url:
        print("\n‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord...")
        success = formatter.send_message(report_payload)
        print(f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {'‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' if success else '‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'}")
